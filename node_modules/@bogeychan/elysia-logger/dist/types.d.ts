/// <reference types="bun-types" />
import type { pino } from 'pino';
import type { Context, Elysia, ElysiaInstance } from 'elysia';
export type StreamLoggerOptions<ContextKeyName extends string> = BaseLoggerOptions<ContextKeyName> & {
    stream?: pino.DestinationStream;
};
export type FileLoggerOptions<ContextKeyName extends string> = BaseLoggerOptions<ContextKeyName> & {
    file: PathLike;
};
export type LoggerOptions<ContextKeyName extends string> = StreamLoggerOptions<ContextKeyName> | FileLoggerOptions<ContextKeyName>;
type BaseLoggerOptions<ContextKeyName extends string> = Omit<pino.LoggerOptions, 'level'> & {
    level?: pino.LevelWithSilent | (string & {});
    contextKeyName?: ContextKeyName;
    customProps?: <Instance extends ElysiaInstance>(ctx: ElysiaContextForInstance<Instance>) => object;
};
export type Logger = pino.Logger;
export type InferElysiaInstance<T> = T extends Elysia<infer _BasePath, infer U> ? U : never;
export type ElysiaContextForInstance<Instance extends ElysiaInstance> = Context<Instance['schema'], Instance['store']> & Partial<Instance['request']>;
export {};
