import Elysia from 'elysia';
import type { LoggerOptions, FileLoggerOptions, StreamLoggerOptions } from './types';
export declare const logger: <ContextKeyName extends string = "log">(options?: StreamLoggerOptions<ContextKeyName>) => Elysia<"", {
    store: {};
    error: {};
    request: {} & Awaited<{ [K in ContextKeyName]: import("pino").Logger<Omit<LoggerOptions<ContextKeyName>, "customProps" | "contextKeyName">>; }>;
    schema: {};
    meta: {
        schema: {};
        defs: {};
        exposed: {};
    };
}>;
export declare const fileLogger: <ContextKeyName extends string = "log">(options: FileLoggerOptions<ContextKeyName>) => Elysia<"", {
    store: {};
    error: {};
    request: {} & Awaited<{ [K in ContextKeyName]: import("pino").Logger<Omit<LoggerOptions<ContextKeyName>, "customProps" | "contextKeyName">>; }>;
    schema: {};
    meta: {
        schema: {};
        defs: {};
        exposed: {};
    };
}>;
export declare function createPinoLogger<ContextKeyName extends string = string>(options?: Omit<LoggerOptions<ContextKeyName>, 'customProps' | 'contextKeyName'>): import("pino").Logger<Omit<LoggerOptions<ContextKeyName>, "customProps" | "contextKeyName">>;
export * from './config';
export type { ElysiaContextForInstance, InferElysiaInstance } from './types';
