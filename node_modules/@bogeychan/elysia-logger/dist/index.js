import pino from 'pino';
import Elysia from 'elysia';
import { formatters, serializers } from './config';
export const logger = (options = {}) => plugin(options);
export const fileLogger = (options) => plugin(options);
export function createPinoLogger(options = {}) {
    if (!options.level) {
        options.level = 'info';
    }
    if (!options.formatters) {
        options.formatters = formatters;
    }
    if (!options.serializers) {
        options.serializers = serializers;
    }
    const streamOptions = options;
    if ('file' in options) {
        streamOptions.stream = pino.destination(options.file);
        delete options.file;
    }
    return pino(options, streamOptions.stream);
}
function plugin(options) {
    if (!options.contextKeyName) {
        options.contextKeyName = 'log';
    }
    const { contextKeyName, ...loggerOptions } = options;
    return new Elysia({
        name: '@bogeychan/elysia-logger'
    }).derive((ctx) => {
        let log = createPinoLogger(loggerOptions);
        if (typeof options.customProps === 'function') {
            log = log.child(options.customProps(ctx));
        }
        return {
            [contextKeyName]: log
        };
    });
}
export * from './config';
